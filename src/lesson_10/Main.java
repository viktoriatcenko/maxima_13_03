package lesson_10;

import lesson_10.animals.Cat;
import lesson_10.animals.Dog;

public class Main {
    public static void main(String[] args) {
        // OOP
        /*
        * ООП - объектно-ориентированное программирование. Основные принципы:
1. Инкапсуляция - область видимости, реализована через модификаторы доступа:
public - метод/класс/переменная будет доступен внутри всех пакетов всего проекта (99% случаев использует)
protected - внутри пакета и его наследникам, то есть дочерним классам, расположенных в других папках
 --------- будет доступен только внутри текущего пакета (текущей папки); package-private
private - только внутри текущего класса (файла);
2. Наследование - extends - это механизм, который позволяет создавать классы на основе
других классов наследую их метады в дочерних (подчиненных) классах.
3. Абстракция - означает выделение главных, наиболее значимых характеристик предмета и
нооборот - отбрасывание второстепенных, незначительных.
4. Полиморфизм - это способность программы идентично использовать объекты с одинаковым интерфейсом
 без информации о конкретном типе этого объекта.
 Мы можем работать со многими типами, как с одним (при условии, что эти типы являются производными (дочерними)
 от базового (разового) типа).


Для проверки можно ли наследоваться слово extends нужно заменить на "ЯВЛЯЕТСя ли",
 при однозначном ДА можно наследоват Если создать массив Человек[] люди = Человек[5];
 Тогда в нем можно хранить объекты подчиненных классов Ученик и Работник, а также ниже по иерархии,
 например ученик может делиться на первоклассников
и старшеклассников.
        * **/


        Cat cat = new Cat();
        cat.setCouch("Cat's place");
        cat.setAge(5);
        cat.setName("Snezhok");

        Dog dog = new Dog();
        dog.setName("Sharik");
        dog.setBone("Lovely bone");

        System.out.println(cat.getName() + " and " + dog.getName() + " are the best friends");

        cat.sayHello();
        dog.sayHello();

    }
}
